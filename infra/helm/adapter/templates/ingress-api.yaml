apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: qc-backend-api
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/proxy-body-size: "2m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/hsts: "true"
    nginx.ingress.kubernetes.io/hsts-max-age: "31536000"
    nginx.ingress.kubernetes.io/hsts-include-subdomains: "true"
    # Harden headers
    nginx.ingress.kubernetes.io/server-snippet: |
      add_header X-Content-Type-Options nosniff;
      add_header X-Frame-Options DENY;
      add_header X-XSS-Protection "1; mode=block";
    # WAF: Strict on API
    {{- if .Values.ingress.waf.enabled }}
    nginx.ingress.kubernetes.io/modsecurity: "on"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRuleEngine On
      Include /etc/nginx/owasp-modsecurity-crs/nginx-modsecurity.conf
      SecAuditEngine RelevantOnly
      SecAuditLogParts ABIJDEFHZ
    {{- end }}
    {{- if .Values.ingress.mtls.enabled }}
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
    nginx.ingress.kubernetes.io/auth-tls-secret: "{{ .Release.Namespace }}/{{ .Values.ingress.mtls.clientCaSecret }}"
    nginx.ingress.kubernetes.io/auth-tls-verify-depth: "2"
    {{- end }}
spec:
  tls:
    - hosts: [ {{ .Values.ingress.host | quote }} ]
      secretName: {{ .Values.ingress.tlsSecret }}
  rules:
    - host: {{ .Values.ingress.host }}
      http:
        paths:
          - path: /api
            pathType: Prefix
            backend:
              service:
                name: qc-backend
                port: { number: 80 }
          - path: /docs
            pathType: Prefix
            backend:
              service:
                name: qc-backend
                port: { number: 80 }
          - path: /checkout
            pathType: Prefix
            backend:
              service:
                name: qc-backend
                port: { number: 80 }
